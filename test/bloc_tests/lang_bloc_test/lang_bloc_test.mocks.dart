// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_newsapp/test/bloc_tests/lang_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i2;

import 'package:flutter_newsapp/data/repositories/lang_repo.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLocale_0 extends _i1.Fake implements _i2.Locale {}

/// A class which mocks [LangRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLangRepository extends _i1.Mock implements _i3.LangRepository {
  MockLangRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Locale> getLang() =>
      (super.noSuchMethod(Invocation.method(#getLang, []),
              returnValue: Future<_i2.Locale>.value(_FakeLocale_0()))
          as _i4.Future<_i2.Locale>);
  @override
  _i4.Future<void> updateLang(String? langCode) =>
      (super.noSuchMethod(Invocation.method(#updateLang, [langCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> addLang(String? langCode) =>
      (super.noSuchMethod(Invocation.method(#addLang, [langCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
